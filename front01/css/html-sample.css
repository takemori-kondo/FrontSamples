@charset "utf-8";
/*
# CSS設計プラクティス
________________________________________________________________________________
CSS設計完全ガイド ～詳細解説＋実践的モジュール集  
https://gihyo.jp/book/2020/978-4-297-11173-1

BEM  
https://en.bem.info/

________________________________________________________________________________
## 1. 主なプラクティス
________________________________________________________________________________
### 1.0. 概要

前提・基本プラクティス

1. ルールセットの書式（セレクタ、cssプロパティ、値）
2. CSS詳細度（!important、インライン、id、クラス等、要素、全称）
3. box model
4. display: flex;、flex-wrap: wrap;、justify-content: center;、gap: 0 1.5rem;
5. position: absolute;、right: 0;
6. @media(max-width: 767px){ ... }がモバイル対応の基本
7. cssファイルを利用する。インラインやstyle要素を避ける
8. classセレクタ、idセレクタ、input[type="text"]など、:link、:active、:visitedを使う
9. 結合子（親子関係など）は使いすぎない
10. font-size指定は理由がなければremで設定
11. !importantを避ける
12. * { box-sizing: border-box; }する（直感的にデザイン可能になる）
13. normalizeする。normalize.cssを使うと便利
14. 固定ヘッダするならsticky&top。さらにページ内リンクがあるならanchor HACK

目的：打ち消しCSSの最小化、CSS優先度地獄に陥らない

1. cssを分類する
2. htmlとcssが疎結合
3. その他の細則

________________________________________________________________________________
## 1.1. cssを分類する（SMACSS like）

概要

- サイト全体の基本方針になる設定はhtmlやbody、BEMであれば .baseに記載する
- layoutとmoduleは分けて考える。そしてこれら自体の粒度も細かく保つ
    - 要約：ブロックレベル要素はlayout未指定時に横幅100％かつ上下マージン0の状態にする

例

1. 全体設定(base)
    - リセットCSSまたはノーマライズCSS
    - 通常時のフォントのスタイリング
    - 通常時のリンクのスタイリング
    - その他、全体の基本方針
2. layout系のプロパティ
    - position
    - z-index
    - top, right, bottom left
    - float
    - width(root)
    - margin
3. module
    - 自身や子要素のスタイリングに責任を持つ。自身のサイズや配置は想定しない
    - 単モジュール：ボタンなど
    - 複合モジュール：説明・挿絵・ボタンをひとまとめにしたセクションなど
    - structure
        - width(child), height, border, padding, min-width, min-height...
    - skin
        - color, border-color, background-color...

________________________________________________________________________________
## 1.2. htmlとcssが疎結合

文書の内容で変わってしまうDOM構造に依存させない。結合子を使用してよいタグセレクタは、以下のみ

- li
- dd, dt
- thead, tbody, tr, th, td
- input, select, option, textarea

________________________________________________________________________________
## 1.3. その他の細則

- 用途の広いタグは使用しない（div、header、footer、section、p、span）
- コンテキストを限定しすぎない（不要な結合子を避ける）
- CSS詳細度が高すぎない（不要な結合子を避ける）
- 影響範囲が想像できるクラス名（BEM likeの推奨）
- 役割が想像できるクラス名（module-aなどを避ける）
- 拡張しやすい（OOCSS like（構造（ボックスモデル）とスキン（色やradiusなど）の分離）の推奨）



________________________________________________________________________________
## 2. BEM
________________________________________________________________________________
### 2.1. ルール

1. 書式は以下の6種類
1.1. block-name
1.2. block-name_modifier-state
1.3. block-name_modifier-key_modifier-value
1.4. block-name__element-name
1.5. block-name__element-name_modifier-state
1.6. block-name__element-name_modifier-key_modifier-value

2. 見た目ではなく役割を命名
OK : .error
NG : .red-text

3. クラスセレクタを使用し、タグ・IDセレクタは避ける
OK : .header
NG : #logo

4. CSS結合子は基本的には避ける
特に直交したBEMブロック同士はhtml側で組み合わせるべきである
これは複雑になったときのCSS優先度の問題に直結してくる

5. BEMブロックを構成する必須なBEM要素は、BEMブロック名に続ける
OK : .search-form__input { ... }
NG : .input { ... }

6. BEM要素は、html階層に関係なくBEMブロック名に続ける
OK : .search-form__input
NG : .search-form__content__input
※ 要素の要素が必要だと感じたら、サブのBEMブロックが存在することを示唆する

7. BEM要素は、BEMブロックを指定した要素やその子孫にしか指定しない

8. BEMブロックにBEM要素がなくてもよい

9. BEM修飾子は、必ず修飾子がないBEMとセットで使用する
言い換えると、BEM修飾子の修飾子部分のないデフォルトのBEMは必ずある
OK : class="search-form search-form_theme_islands"
NG : class="search-form_theme_islands"

10. 1つのBEMブロックに大きすぎる責務を負わせない
Atomicデザイン、layout&module分離などが基本的な方針

________________________________________________________________________________
### 2.2. ルールの動機

1つは、CSS優先度地獄に陥らないため
1つは、html側で複数のBEMブロックを自由に組み合わせて意味的に競合しないようにするため
（ただし組み合わせた結果が想定したデザインになるかどうかは各BEMブロックの作り方次第）
（もっというと、それを可能にするようにcssを宣言していくのが推奨されている）



________________________________________________________________________________
## 3. まとめ
________________________________________________________________________________

1. BEM記法を使い、BEMの考え方を採用する
2. 各BEMブロックはSMACSS likeに分割し分類する
3. moduleなBEMブロックはさらに、OOCSS likeに分解する
4. レイアウトly-、スキンskn-、ベーススキンskn-base-接頭辞を使う
*/



/***************************************
common
***************************************/
/************* normalize **************/
html {
  line-height: 1.15;
  -webkit-text-size-adjust: 100%;
}

body {
  margin: 0;
}

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
  line-height: 1.15;
  margin: 0;
}

/*********** 全体設定(base) ***********/
/* 全体の基本方針 */
* {
  box-sizing: border-box;
}

html {
  font-size: 16px;
  font-family: sans-serif;
  background-color: #dddddd;
}

.skn-base-positive {
  color: #28282a;
  background-color: #fffefe;
}

.skn-base-negative {
  color: #ffffff;
  background-color: #253958;
}

.skn-base-reverse-negative {
  color: #253958;
  background-color: #ffffff;
}

/* リンクの基本方針 */
a:link,
a:visited {
  color: #f07d34;
  text-decoration: none;
}

a:active {
  color: #f07d34;
  text-decoration: underline;
}

/* 見出しの基本方針 */
h1 {
  color: #253958;
  font-size: 1.4rem;
  text-align: center;
  border-top: 2px solid #253958;
  border-bottom: 2px solid #253958;
}

h2 {
  color: #253958;
  font-size: 1.2rem;
  border-top: 1px solid #253958;
  border-right: 1px solid #253958;
  border-bottom: 1px solid #253958;
  border-left: 12px solid #253958;
  padding-left: 12px;
}

h3,
h4,
h5,
h6 {
  color: #253958;
  font-size: 1rem;
}

/* テーブルの基本方針 */
.table-wrap {
  overflow: auto;
}

table {
  margin: 0 auto;
  border-collapse: collapse;
}

th,
td {
  border: 1px solid #dbdbdb;
  padding: 10px;
  white-space: nowrap;
}

th {
  color: #ffffff;
  background-color: #253958;
}

/*********** layout blocks ************/
/* position, z-index, top, right, bottom left, display:float, width(root), margin */
.ly-sticky-header {
  position: sticky;
  top: 0;
  z-index: 100;
}

.ly-horizontal-list {
  margin: 0;
  padding: 0;
  list-style-type: none;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0 1.5rem;
}

.ly-box-centering {
  margin: 0 auto;
}

.ly-absolute-left {
  position: absolute;
  left: 0;
}

.ly-absolute-right {
  position: absolute;
  right: 0;
}

/* sticky vs ページ内リンクHACK */
.ly-hack-anchor {
  display: block;
  position: relative;
  top: -76px;
  visibility: hidden;
}

.ly-subarea-of-main {
  margin: 40px 0;
}

.ly-content-section {
  margin-bottom: 100px;
}

.ly-input-container {
  margin-bottom: 1rem;
}

.ly-caption-label {
  display: block;
}

/****** structure module blocks *******/
/* width(child), height, border, padding, min-width, min-height... */
.site-main {
  max-width: 1000px;
  padding: 10px;
}

.site-footer {
  padding: 4px;
}

/********* skin module blocks *********/
/* color, border-color, background-color... */

.skn-inline-centering {
  text-align: center;
}

.skn-simple-border {
  border-style: solid;
  border-color: #999999;
}

.skn-vertical-box-shadow {
  box-shadow: 0 2px 4px #aaaaaa;
}

/********** composite blocks **********/
/* フォームサンプル（width:50%） */
.half-width-inputs input[type="text"],
.half-width-inputs input[type="email"],
.half-width-inputs select,
.half-width-inputs textarea {
  min-width: 300px;
  width: 50%;
  border-width: 1px;
}



/***************************************
hamburger system
***************************************/
/*
e.g.
#site-menu-mobile-state
 │
.site-menu-mobile-state__sibling ─ .hamburger-container-40px ─ .hamburger-container-40px__lines .anm-hamburger-lines
 │
.site-menu-mobile-state__sibling ─ 連動させたいパーツ
*/
/******** hamburger structure *********/
.hamburger-container-40px {
  height: 40px;
  width: 40px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.hamburger-container-40px__line-top___,
.hamburger-container-40px__line_______,
.hamburger-container-40px__line-bottom {
  display: block;
  position: absolute;
  width: 30px;
  content: '';
}

.hamburger-container-40px__line-top___ {
  /* align-items: center & absoluteなので、2倍の値が必要 */
  margin-top: -20px;
}

.hamburger-container-40px__line-bottom {
  /* align-items: center & absoluteなので、2倍の値が必要 */
  margin-top: 20px;
}

/*********** hamburger skin ***********/
.skn-hamburger-lines {
  height: 4px;
  border-radius: 2px;
}

/***** hamburger animation speed ******/
.anm-hamburger-lines {
  transition: transform 200ms ease-in-out;
}

/**************** bind ****************/
#site-menu-mobile-state {
  display: none;
}

#site-menu-mobile-state:checked~.site-menu-mobile-state__sibling .hamburger-container-40px__line-top___ {
  transform: rotate(45deg) scaleX(1.2) translate(6px, 7px);
}

#site-menu-mobile-state:checked~.site-menu-mobile-state__sibling .hamburger-container-40px__line_______ {
  background: rgba(255, 255, 255, 0);
}

#site-menu-mobile-state:checked~.site-menu-mobile-state__sibling .hamburger-container-40px__line-bottom {
  transform: rotate(-45deg) scaleX(1.2) translate(6px, -7px);
}



/**************************************
pc
**************************************/
@media(min-width: 768px) {
  .site-header-pc {
    display: block;
  }

  .site-header-mobile {
    display: none;
  }
}



/**************************************
mobile
**************************************/
@media(max-width: 767px) {
  .site-header-pc {
    display: none;
  }

  .site-header-mobile {
    display: block;
  }

  /********** composite blocks **********/
  .site-title-mobile {
    padding-top: 4px;
    padding-left: 4px;
    font-size: 11.5px;
  }

  .page-title-mobile {
    font-size:14px;
    height: 40px;
    line-height:40px;
    text-align: center;
  }

  .site-menu-mobile {
    overflow: hidden;
    height: 0;
    margin: 0;
    list-style-type: none;
    transition: all 200ms ease-in-out;
  }

  #site-menu-mobile-state:checked~.site-menu-mobile-state__sibling .site-menu-mobile {
    height: 150px; /* height: auto; だとアニメーションが利かないため固定値が必要 */
  }
}